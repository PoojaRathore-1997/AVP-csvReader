package Face1;
	# Generated by Selenium IDE
	#from lib2to3.pgen2 import driver
	import datetime
	from socket import timeout
	import pytest
	import time
	import json
	from selenium import webdriver
	from selenium.webdriver.common.by import By
	from selenium.webdriver.common.action_chains import ActionChains
	from selenium.webdriver.support import expected_conditions
	from selenium.webdriver.support.wait import WebDriverWait
	from selenium.webdriver.common.keys import Keys
	from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
	from selenium.webdriver.support.ui import WebDriverWait
	from selenium.webdriver.common.by import By
	from selenium.webdriver.support import expected_conditions as EC


public class Template 
{
public static void main(String[] args)
{
	class TestDgfkjsdhgk():
	  def setup_method(self, method):
	    self.driver = webdriver.Chrome()
	    self.driver.implicitly_wait(10)
	    self.vars = {}
	  
	  def teardown_method(self, method):
	    self.driver.quit()
	  
	  def test_dgfkjsdhgk(self):
	    # Test name: dgfkjsdhgk
	    # Step # | name | target | value
	    # 1 | open | / | 
	    self.driver.get("https://promoter.applination.in/")
	    
	    self.driver.find_element(By.ID,"email").send_keys("ashishgargvdoit@gmail.com")
	    self.driver.find_element(By.ID,"password").send_keys("123456")
	    # 3 | click | css=.login | 
	    self.driver.find_element(By.CSS_SELECTOR, ".LoginButton").click()
	    time.sleep(2)
	    self.driver.find_element(By.XPATH, "//div[contains(text(),'+ New Tournament')]").click()
	    # 5 | click | css=.event-input | 
	    self.driver.find_element(By.CSS_SELECTOR, ".event-input").click()
	    # 6 | type | css=.event-input | test
	    self.driver.find_element(By.CSS_SELECTOR, ".event-input").send_keys("test")
	    element = self.driver.find_element(By.XPATH, "//img[@class='img-fluid new-event']")
	    self.driver.execute_script("arguments[0].click();", element)
	    # 8 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 9 | click | css=.DropdownBar > #points-hamburger .ml-2 | 
	    self.driver.find_element(By.CSS_SELECTOR, ".DropdownBar > #points-hamburger .ml-2").click()
	    # 10 | click | css=.dropdown-text:nth-child(4) |
	    time.sleep(2) 
	    self.driver.find_element(By.XPATH, "//li[contains(text(),'Father-Daughter')]").click()
	    time.sleep(2)
	    # 11 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    time.sleep(5)
	    # 12 | click | name=15+ | 
	    # self.driver.find_element(By.XPATH, "//input[@name='15U']/following-sibling::span[1]").click()
	    button = self.driver.find_element(By.XPATH, "//input[@name='15+']/following-sibling::span[@class='AS1checkmark MensCheck']")
	    ActionChains(self.driver).move_to_element(button).click(button).perform()
	    #element = self.driver.find_element(By.XPATH, "//input[@name='14U']/following-sibling::span[1]")
	    #self.driver.execute_script("arguments[0].click();", element)
	    # 13 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 14 | click | css=.DropdownBar > #points-hamburger .ml-2 |
	    time.sleep(2)
	    self.driver.find_element(By.CSS_SELECTOR, ".DropdownBar > #points-hamburger .ml-2").click()
	    # 15 | click | css=.dropdown_animation li:nth-child(1) | 
	    time.sleep(2) 
	    self.driver.find_element(By.XPATH, "//li[contains(text(),'6')]").click()
	    # 16 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 17 | mouseOver | css=.WFNextButtonText | 
	    button = self.driver.find_element(By.XPATH, "//label[@class='AS1checkbox MensLabel']/span[@class='AS1checkmark MensCheck']")
	    ActionChains(self.driver).move_to_element(button).click(button).perform()
	    # 19 | click | id=LEPrice | 
	    self.driver.find_element(By.ID, "LEPrice").click()
	    # 20 | type | id=LEPrice | $10
	    self.driver.find_element(By.ID, "LEPrice").send_keys("$10")
	    # 21 | click | id=DivisionName | 
	    self.driver.find_element(By.ID, "DivisionName").click()
	    # 22 | type | id=DivisionName | zczc
	    self.driver.find_element(By.ID, "DivisionName").send_keys("zczc")
	    # 23 | click | css=.INbuttons > #yellow-button-hover | 
	    self.driver.find_element(By.CSS_SELECTOR, ".INbuttons > #yellow-button-hover").click()
	    # 24 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 25 | click | css=.ant-picker-focused input | 
	    tod = datetime.date.today()
	    date_delta = datetime.timedelta(days = 2)
	    future_date= tod + date_delta
	    future_date_formatted = datetime.date.strftime(future_date, "%m/%d/%Y")
	    #datefield = self.driver.find_element(By.XPATH,"//div/form//div/input")
	    #datefield = self.driver.find_element(By.CSS_SELECTOR,"div.ant-picker.ant-picker-borderless.pr-0.text-uppercase.p-0.input-styling.date_picker.ant-picker-focused div.ant-picker-input > input")
	    wait = WebDriverWait(self.driver, 20)
	    date_to_fill = wait.until(EC.element_to_be_clickable((By.XPATH,"//div/form//div/input")))
	    self.driver.execute_script("arguments[0].setAttribute('value', '{}')".format(future_date_formatted), date_to_fill)
	    #ActionChains(self.driver).move_to_element(datefield).click().send_keys(future_date_formatted).perform()
	    # datefield = self.driver.find_element(By.XPATH,"//div/form//div/input")
	    #time.sleep(2)
	    #datefield.send_keys(future_date_formatted)
	    time.sleep(10)
	    #self.driver.find_element(By.XPATH, ).send_keys(future_date_formatted)
	    # 26 | click | css=tr:nth-child(3) > .ant-picker-cell:nth-child(1) > .ant-picker-cell-inner | 
	    # 27 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 28 | click | id=EBAmount | 
	    self.driver.find_element(By.ID, "EBAmount").click()
	    # 29 | type | id=EBAmount | $10
	    self.driver.find_element(By.ID, "EBAmount").send_keys("$10")
	    # 30 | sendKeys | id=EBAmount | ${KEY_ENTER}
	    self.driver.find_element(By.ID, "EBAmount").send_keys(Keys.ENTER)
	    # 31 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 32 | click | id=NEValue | 
	    self.driver.find_element(By.ID, "NEValue").click()
	    # 33 | type | id=NEValue | $15
	    self.driver.find_element(By.ID, "NEValue").send_keys("$15")
	    # 34 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 35 | click | id=LEPrice | 
	    self.driver.find_element(By.ID, "LEPrice").click()
	    # 36 | type | id=LEPrice | $20
	    self.driver.find_element(By.ID, "LEPrice").send_keys("$20")
	    # 37 | click | css=.WFNextButtonText | 
	    self.driver.find_element(By.CSS_SELECTOR, ".WFNextButtonText").click()
	    # 38 | click | id=DivisionName | 
	    self.driver.find_element(By.ID, "DivisionName").click()
	    # 39 | type | id=DivisionName | xyz
	    self.driver.find_element(By.ID, "DivisionName").send_keys("xyz")
	    # 40 | click | name=save_as_template | 
	    self.driver.find_element(By.NAME, "save_as_template").click()
	    # 41 | click | id=DivisionName | 
	    self.driver.find_element(By.ID, "DivisionName").click()
	    # 42 | type | id=DivisionName | xyzz
	    self.driver.find_element(By.ID, "DivisionName").send_keys("xyzz")
	    # 43 | click | css=.SubmitButton | 
	    self.driver.find_element(By.CSS_SELECTOR, ".SubmitButton").click()
	  

}
}
