package com.mystore.base;

import java.awt.Desktop.Action;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import javax.ejb.BeforeCompletion;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.devtools.v85.browser.Browser;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass {
	public static Properties prop ;
//	public static WebDriver driver;
	public static WebDriver driver = new  ChromeDriver ();

	
	@BeforeSuite
	
		public void loadConfig() {
//			ExtentManager.setExtent();
//			DOMConfigurator.configure("log4j.xml");

			try {                                            //read the property so we create a object class
				prop = new Properties();
				FileInputStream ip = new FileInputStream(
						System.getProperty("user.dir") + "\\Configuration\\config.properties");
				prop.load(ip);

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			
		}
			
		}
	public static void driver() {
		// Get Driver from threadLocalmap
//		return driver.get();
	}

	public  void launchApp(String browserName) {
		WebDriverManager.chromedriver().setup();
		String browserName1= prop.getProperty("browser"); 
		if(browserName1.contains("chrome")) {
			driver=new ChromeDriver();
		}
		else if (browserName1.contains("Firefox")) {
			driver=new FirefoxDriver();

		}
		//Maximize the screen
		driver().manage().window().maximize();
				//Delete all the cookies
		driver().manage().deleteAllCookies();
				//Implicit TimeOuts
		driver().manage().timeouts().implicitlyWait
				(Integer.parseInt(prop.getProperty("implicitWait")),TimeUnit.SECONDS);
				//PageLoad TimeOuts
		driver().manage().timeouts().pageLoadTimeout
				(Integer.parseInt(prop.getProperty("pageLoadTimeOut")),TimeUnit.SECONDS);
				//Launching the URL
		driver().get(prop.getProperty("url"));
			}
	


	}

